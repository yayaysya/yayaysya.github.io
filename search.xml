<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一.数据表示]]></title>
    <url>%2F2017%2F10%2F10%2FCSAPP02%2F</url>
    <content type="text"><![CDATA[这一节的知识涉及数据表示等基础内容, 相当于对之前自己学的东西的查缺补漏.第一节毕竟简单, 很快就学完了, 涉及的知识也很零碎且基础不过像大端小端这种问题也是面试的时候常见的问题 更新记录 2017/10/10:写完初稿 本节可以学到 计算机架构 整数运算 浮点运算 数据类型字节数 大端与小端 计算机架构 计算机脱胎于图灵机的构想，简单来说，就是能够执行有限逻辑数学过程的计算模型。 冯诺依曼，1945不但提出了二进制的构想，更将计算机分成五大组件（存储器、控制器、运算器、输入、输出） 哈佛架构，它和冯诺依曼架构最大的区别在于能够同时访问数据和指令。ARM 架构可能是知名度最高的哈佛架构 冯诺依曼架构也有缺陷,比方说缓存溢出可以执行攻击者预订好的程序，给系统带来巨大的安全风险 整数运算整数以及浮点数运算的缺陷 整数溢出了，就成了负数 浮点数运算会损失部分精度 c语言的段错误 无论是 C 或者 C++ 都没有提供任何内存保护机制，再加上强大且危险的指针，出现溢出或者段错误实在是家常便饭。 右移运算一种是逻辑右移（左边补0），另一种是算术右移（左边补符号位）。为什么会有这两种?因为对应无符号数和有符号数的运算，有符号数的最高位（最左边）是符号位在负数的时候需要进行算术右移 编码 有符号数和无符号数在非负数的编码是一样的，每一个数字的编码是唯一的 在进行有符号和无符号数的互相转换时： 具体每一个字节的值不会改变，改变的是计算机解释当前值的方式 如果一个表达式既包含有符号数也包含无符号数，那么会被隐式转换成无符号数进行比较 浮点数M为exp, E为frac浮点数的部分因为工作用的真的很少, 所以暂时不看了 数据类型字节数 大端与小端大端(Big Endian)与小端(Little Endian)，区别在于高位地址的位置例子假如变量 x 是 4 字节，值为 0x01234567 主机/网络字节序 Internet 数据(网络字节序)采用大端规则 x86 或 ARM 处理器都采用小端规则 转换函数htons():将16位无符号整数从本地字节序转换成网络字节序；htonl():将32位无符号整数从本地字节序转换成网络字节序；ntohs():将16位无符号整数从网络字节序转换成本地字节序；ntohl():将32位无符号整数从网络字节序转换成本地字节序； 扩展: 如何检查大小端1234567typedef unsigned char *pointer;void show_bytes(pointer start, size_t len) &#123;size_t i;for (i = 0; i &lt; len; i++)printf(&quot;%p\t0x%.2x\n&quot;, start+i, start[i]);printf(&quot;\n&quot;);&#125; 看看高字节对应的是高地址还是低地址, 对应大端和小端 参考链接 小土刀-不周山之读薄CSAPP-壹-数据表示]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>小土刀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零.深入理解计算机系统]]></title>
    <url>%2F2017%2F10%2F10%2FCSAPP01%2F</url>
    <content type="text"><![CDATA[对于经典书籍&lt;深入理解计算机系统&gt;, 自己并没有阅读过,但是自己在工作中发现, 自己遇到的很多问题都涉及到计算机系统(Linux)底层的一些原理, 而自己对于这些原理的认知缺乏给自己的工作带来了很多负面的影响.CSAPP这本书太厚, google后发现了小土刀这个博客, 这个博客的博文真的写的很棒, 对于知识的认知, 以及博主自己学习的经历与方法都对我有很大的启发. 更新记录 2017/10/10:写完初稿 学习的目的 为了让自己对计算机系统的原理有更深刻的理解. 自己本科并没有学习过这些计算机的知识, 其实也相当于补课了. 为了解决相关的bug, 自己之前遇到了很多个尚未解决的bug, 都是涉及到底层以及内存方面的问题, 比如内存泄漏, 内存越界, 这些问题在嵌入式系统中都很难解决, 希望阅读这本书可以让自己对这些问题有所启发 浅尝辄止 小土刀的博客是对CSAPP的读薄, 那我再去阅读小土刀的博文, 那就是对原书不深入的阅读了 知识很多, 但是大学的学习经验告诉我, 我不可能去读透每一本书, 但是学习一本书的主干这种能力我还是有的, 如果能够了解几大块知识的主干, 那我去读博客这个行为可以算是有意义了 关于坚持 自己最大的问题是就是坚持, 学习了很多的东西, 都是半途而废了. 毕竟一个人学习新东西的时候是最有精力的,但是学习了一些之后一遇到难学的知识点就学习不下去了, 就想放弃掉. 其实可以容忍这种行为, 毕竟自己还有工作生活, 外部的环境让自己难以继续下去的可能性也是有的. 这样, 如果自己决定那天学不下去了, 就宣布停更, 存档, 等之后过一段时间有兴趣了再接着学习下去 最后很感谢小土刀能写出这么棒的博文并且公开出去, 谢谢! 参考链接 小土刀]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>小土刀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10月日志]]></title>
    <url>%2F2017%2F10%2F09%2FDaliyReport10%2F</url>
    <content type="text"><![CDATA[江城如画里，山晓望晴空。 10-09 今天收获10-09工作情况 继续研究段错误的问题可以判断问题应该就出在predict_cartype函数中 其他学习 学习了linux的内存分布, 文章还需要完善 发现了小土刀这个人的日志, 真的写的很好, 应该向他学习另外还有&lt;&lt;深入理解计算机系统&gt;&gt;这本书, 还有他推荐的一些博客 10-10 今天收获10-10工作情况 继续研究段错误的问题 其他学习 学习了小土刀CSAPP第一节内容 链接测试 百度]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系统-linux虚拟内存管理]]></title>
    <url>%2F2017%2F10%2F09%2FLinuxKnowMem%2F</url>
    <content type="text"><![CDATA[写linux C语言程序的过程中, 经常遇到内存方面的问题, 内存泄漏, 内存越界, 段错误…这些问题都让人很头痛, 自己又对linux内存分布以及内存分配方式不是很了解,阅读了几篇文章, 总结了一下相关知识, 加深一下自己对这方面的了解 内存分布 内核空间与用户空间linux系统中, 内核空间和用户空间所占的虚拟内存比例为1:3 32 位系统有4G 的地址空间:其中0x08048000~0xbfffffff是用户空间，0xc0000000~0xffffffff是内核空间，包括内核代码和数据、进程相关的数据结构（如页表、内核栈）等。 虚拟地址与物理地址 每个进程都有独立的虚拟地址空间 虚拟地址可通过每个进程上的页表(在每个进程的内核虚拟地址空间-属于用户空间)与物理地址进行映射，获得真正物理地址； 如果虚拟地址对应物理地址不在物理内存中，则产生缺页中断，真正分配物理地址，同时更新进程的页表；如果此时物理内存已耗尽，则根据内存替换算法淘汰部分页面至物理磁盘中。(后面这一句不是很明白) 用户空间分布Linux 使用虚拟地址空间，大大增加了进程的寻址空间，由低地址到高地址分别为： 只读段该部分空间只能读，不可写；包括：代码段、rodata 段(C常量字符串和#define定义的常量) 数据段保存全局变量、静态变量的空间；其中数据段保存已经初始化且初始值不为0的全局变量和静态局部变量, bss段保存未初始化或者初始值为0的全局变量和静态局部变量 堆就是平时所说的动态内存， malloc/new 大部分都来源于此。堆的末端由break指针标识，当堆管理器需要更多内存时，可通过系统调用brk()和sbrk()来移动break指针以扩张堆，一般由系统自动调用。 内存映射段 如动态库、共享内存等映射物理空间的内存，一般是 mmap 函数所分配的虚拟地址空间。 在linux系统中, 如果通过malloc请求一大块内存, c运行库将创建一个匿名内存映射, ‘大块’意味着比MMAP_THRESHOLD还要大, 该常量的缺省值为128k, 可以通过mallopt()函数进行调整. 关于共享库的位置在2.6版本之前, 共享库从0x40000000开始的地址分配相应空间，并在程序装载时将其载入到该空间内存映射段被分为了两个部分, 从0x40000000划分开, 不到1G的空间和不到2G的空间,此时应用程序最大malloc空间为不到2G在2.6版本中, 共享库的装载地址已经被挪到靠近栈的位置了即0xBFxxxxxx附近.此时单次malloc最大空间理论值在2.9G左右 栈用于维护函数调用的上下文空间，一般为 8M ，可通过 ulimit –s 查看。作用: 为函数内部声明的非静态局部变量(C语言中称“自动变量”)提供存储空间。 函数调用过程信息: 函数参数, 函数返回地址 临时存储alloca函数分配的栈内内存 内核虚拟空间用户代码不可见的内存区域，由内核管理(页表就存放在内核虚拟空间)。 栈与堆的区别 管理方式：栈由编译器自动管理；堆由程序员控制 生长方向：栈向低地址扩展(即”向下生长”)，是连续的内存区域；堆向高地址扩展(即”向上生长”)，是不连续的内存区域。这是由于系统用链表来存储空闲内存地址，自然不连续，而链表从低地址向高地址遍历。 空间大小：栈顶地址和栈的最大容量由系统预先规定(通常默认2M或10M)；堆的大小则受限于计算机系统中有效的虚拟内存，32位Linux系统中堆内存可达2.9G空间。 存储内容：栈在函数调用时，首先压入主调函数中下条指令(函数调用语句的下条可执行语句)的地址，然后是函数实参，然后是被调函数的局部变量。本次调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的指令地址，程序由该点继续运行下条可执行语句。堆通常在头部用一个字节存放其大小，堆用于存储生存期与函数调用无关的数据，具体内容由程序员安排。 分配方式：栈可静态分配或动态分配。静态分配由编译器完成，如局部变量的分配。动态分配由alloca函数在栈上申请空间，用完后自动释放。堆只能动态分配且手工释放。 分配效率：栈由计算机底层提供支持：分配专门的寄存器存放栈地址，压栈出栈由专门的指令执行，因此效率较高。堆由函数库提供，机制复杂，效率比栈低得多。Windows系统中VirtualAlloc可直接在进程地址空间中分配一块内存，快速且灵活。 分配后系统响应：只要栈剩余空间大于所申请空间，系统将为程序提供内存，否则报告异常提示栈溢出。操作系统为堆维护一个记录空闲内存地址的链表。当系统收到程序的内存分配申请时，会遍历该链表寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点空间分配给程序。若无足够大小的空间(可能由于内存碎片太多)，有可能调用系统功能去增加程序数据段的内存空间，以便有机会分到足够大小的内存，然后进行返回。，大多数系统会在该内存空间首地址处记录本次分配的内存大小，供后续的释放函数(如free/delete)正确释放本内存空间。此外，由于找到的堆结点大小不一定正好等于申请的大小，系统会自动将多余的部分重新放入空闲链表中。 碎片问题：栈不会存在碎片问题，因为栈是先进后出的队列，内存块弹出栈之前，在其上面的后进的栈内容已弹出。而频繁申请释放操作会造成堆内存空间的不连续，从而造成大量碎片，使程序效率降低。 参考链接 http://www.cnblogs.com/dongzhiquan/p/5621906.html http://www.cnblogs.com/clover-toeic/p/3754433.html]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>malloc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月日志]]></title>
    <url>%2F2017%2F09%2F30%2FDaliyReport09%2F</url>
    <content type="text"><![CDATA[袅袅兮秋风，洞庭波兮木叶下 0930 今天收获工作情况 继续钻研段错误的问题 关闭predict_cartype函数, 然后运行发现段错误不复现其他学习 美化了next主题具体的美化事项见博客 0929 今天收获工作情况 300w车型段错误bug(50%)今天本来怀疑是事件上传产生的问题, 但是后来经过试验发现即使事件不上传也会出现bug其他学习 详细研究了free命令的用法, 了解了swap, cache, buffer 购入了一个域名, 现在研究如何绑定到hexo上面 绑定域名到hexo只需要将修改nginx的配置文件hexo.conf即可,修改下面这一项即可server_name example.com www.example.com;//这里输入你的域名或IP地址 0928 今天收获工作情况 300w车型添加(50%) 今天跟徐忠杰确认了300w的内存表, 确定了之前分配的内存是没错的 现阶段的问题是, 车型添加后容易发生段错误 出了一个临时的300w版本,修正了爆闪帧的红框问题(100%) 工作心得以后和其他家的人沟通 能发邮件的发邮件, 文字说明要比口头说明说的清楚 对于临时出现的问题, 不要盲目的下结论, 比如上次多了一个its_linux_app, 不要盲目下结论, 先查查看看同类的相机有没有, 然后再研究一下原因. 很多复杂的问题, 先自己研究原因, 涉及内存的问题, 多看看文件目录下的文件, df, du是常用的命令 明天工作 为自己的博客添加一个栏目叫做日报和周报, 记录自己的学习所得, 与工作无关 把0928的日报补到opms管理系统里面去]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题美化]]></title>
    <url>%2F2017%2F09%2F30%2FNextMeihua%2F</url>
    <content type="text"><![CDATA[看到网上各种折腾next主题的, 自己也想为自己的next主题添加一下东西, 也为了让自己以后写博客更有动力, 参考了很多网上的东西, 先暂时添加一下的内容, 以后如果发现好玩的还会去更新 美化内容主题选择一共四种主题可以选择12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 之前用的是Pisces, 刚才实验了Gemini, Gemini就是在Pisces的基础上将页面变成了卡片式样的其实觉得原始的主题Muse更好看, 但是这种侧边栏挺难受的所以决定还是回归到Gemini算了 颜色块标签next\source\css\custom\custom.styl添加代码(本文最后)使用的时候 这是颜色块标签 这是颜色块标签 颜色可以为yellow green blue purple red 文本框 这是带颜色的文本框 这是带颜色的文本框 颜色可以为yellow green blue purple red位置可以为left \ top \ right 修改侧边栏头像为旋转圆形修改文件~\hexo\themes\next\source\css\_common\components\sidebar\sidebar-author.styl原本是12345678.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color;&#125; 修改为1234567891011121314151617181920.site-author-image &#123; display: block; margin: 0 auto; max-width: 96px; height: auto; border: 2px solid #333; padding: 2px; border-radius: 50% webkit-transition: 1.4s all; moz-transition: 1.4s all; ms-transition: 1.4s all; transition: 1.4s all;&#125;.site-author-image:hover &#123; background-color: #55DAE1; webkit-transform: rotate(360deg) scale(1.1); moz-transform: rotate(360deg) scale(1.1); ms-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1);&#125; 成功添加后效果 添加鼠标样式themes/next/source/css/_custom/custom.styl中添加代码1234567// 鼠标样式 * &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important &#125; 未找到合适的鼠标样式的图片, 先暂时不添加了TBD 文章的宽度参考wanzhiyu.top中的介绍 修改方法1.打开\themes\next\source\css\_common\components\post\post-expand.styl文件修改1@media (max-width: 767px) 为1@media (max-width: 1080px) 2.打开\themes\next\source\css\ _variables\base.styl修改123$main-desktop = 960px$main-desktop-large = 1200px$content-desktop = 700px 为123$main-desktop = 1080px$main-desktop-large = 1200px$content-desktop = 810px 3.打开\themes\next\source\css\_schemes\Pisces\_layout.styl, 修改1234.header &#123; position: relative; margin: 0 auto; width: 1080px; 修改文章底部的#号实现方法修改/themes/next/layout/_macro/post.swig搜索rel=&quot;tag&quot;&gt;#修改为rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 效果 添加顶部加载条修改theme/next/_config.yml中将pace: false改为pace: true即可默认的颜色不太好看,之后有空换换其他的看看效果如何TBD 添加文章更新时间新的next主题有文章更新时间的设置, 在主题配置文件中, 设置 123456# Post meta display settingspost_meta: item_text: true created_at: true updated_at: true #显示文章更新时间 categories: true 写文章的时候直接在开头添加1updated: 2016-10-14 10:53:09 如果没有会显示文章默认的修改日期 使用 不蒜子 给站点添加统计next 主题支持 不蒜子 统计，设置 主题配置文件 如下即可 1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 您是第 #&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; site_uv_footer: 个小伙伴 # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 #&lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: 次 # custom pv span for one page only page_pv: false page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; page_pv_footer: 为网站添加图标 准备一张32x32的ico图标, 并且命名为favicon.ico, 将其放到themes/next/source/images中 修改主题配置文件12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /images/favicon.ico 遇到的问题 颜色标签不显示现在发现颜色标签还是不显示好吧, 是网络的问题, 刚才没有及时更新, 现在好了, 已经可以正常显示了 文章内链接颜色不变虽然修改过了custom.styl, 但是文章内的链接颜色依旧不变, 之后进行修改一下TBD 试验一下 可以正常显示蓝色链接了, 应该是按照markdown语法的链接才会有效 为了实现任意链接尝试按照另一种方法, 在themes\next\source\css\_common\components\post\post.styl中添加123456789// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #fc6423; border-bottom: none; &#125;&#125; 结果还是没用, 看来只能够按照markdown语法去写链接修改参考链接为markdown语法 颜色块代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342// Custom styles.//修改文章内链接文本样式.post-body p a &#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #0477ab; text-decoration: underline; &#125;&#125;//修改不在文章内的链接文本样式.link-blue&#123; color: #f36; &amp;:hover &#123; color: #f00; &#125;&#125;//修改文章内code样式code &#123;color:#fff;background:#333;&#125;//修改文章中图片样式，改为居中.posts-expand .post-body img &#123; margin: 0 auto;&#125;// 下载样式a#download &#123; display: inline-block; padding: 0 10px; color: #000; background: transparent; border: 2px solid #000; border-radius: 2px; transition: all .5s ease; font-weight: bold; &amp;:hover &#123; background: #000; color: #fff; &#125;&#125;//阅读全文样式.post-more-link .btn &#123; position:relative; border: 2px solid #000; border-radius: 2px; padding: 0 10px; font-weight: bold; background: transparent; transition: all .5s ease; &amp;:hover &#123; background: #000; color: #eee; &#125;&#125;//// 颜色块-黄span#inline-yellow &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #f0ad4e;&#125;// 颜色块-绿span#inline-green &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #5cb85c;&#125;// 颜色块-蓝span#inline-blue &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #2780e3;&#125;// 颜色块-紫span#inline-purple &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #9954bb;&#125;// 颜色块-红span#inline-red &#123; display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #df3e3e;&#125;// 左侧边框红色块级p#div-border-left-red &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #df3e3e;&#125;// 左侧边框黄色块级p#div-border-left-yellow &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #f0ad4e;&#125;// 左侧边框绿色块级p#div-border-left-green &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #5cb85c;&#125;// 左侧边框蓝色块级p#div-border-left-blue &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #2780e3;&#125;// 左侧边框紫色块级p#div-border-left-purple &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #9954bb;&#125;// 右侧边框红色块级p#div-border-right-red &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #df3e3e;&#125;// 右侧边框黄色块级p#div-border-right-yellow &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #f0ad4e;&#125;// 右侧边框绿色块级p#div-border-right-green &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #5cb85c;&#125;// 右侧边框蓝色块级p#div-border-right-blue &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #2780e3;&#125;// 右侧边框紫色块级p#div-border-right-purple &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #9954bb;&#125;// 上侧边框红色p#div-border-top-red &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #df3e3e;&#125;// 上侧边框黄色p#div-border-top-yellow &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #f0ad4e;&#125;// 上侧边框绿色p#div-border-top-green &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #5cb85c;&#125;// 上侧边框蓝色p#div-border-top-blue &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #2780e3;&#125;// 上侧边框紫色p#div-border-top-purple &#123; display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #9954bb;&#125;//动画模块//第一篇博客中-精于心，简于形-的动画span#yu-1 &#123; display:inline; position:relative; border-top:1px solid #222; border-bottom:1px solid #222; font-size:110%; cursor:pointer; &amp;:hover &#123; background-color: #000; color: #fff; animation: animate-yu-1 3s ease-in; &#125;&#125;@keyframes animate-yu-1 &#123; 0% &#123; left:-10px; top:0px; &#125; 10% &#123; left:10px; top:0px; &#125; 20% &#123; left:-8px; top:0px; &#125; 30% &#123; left:8px; top:0px; &#125; 40% &#123; left:-5px; top:0px; &#125; 50% &#123; left:5px; top:0px; &#125; 60% &#123; left:-3px; top:0px; &#125; 70% &#123; left:3px; top:0px; &#125; 80% &#123; left:-1px; top:0px; &#125; 90% &#123; left:1px; top:0px; &#125; 100% &#123; left:0px; top:0px; &#125;&#125;//留言页面-[最近访客]-的样式span#yu-2 &#123; display:inline; position:relative; border-top:1px solid #222; border-bottom:1px solid #222; font-size:130%;&#125; 参考链接 http://www.lazyboy.site http://www.vitah.net/posts/20f300cc/ http://theme-next.iissnan.com http://codepub.cn/]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令-free]]></title>
    <url>%2F2017%2F09%2F29%2FLinuxCommandFree%2F</url>
    <content type="text"><![CDATA[命令的使用 参数的含义1234567MEM： total：总计物理内存大小 used：已经使用的物理内存大小 free： 空闲的物理内存大小 shared：多个进程共享的内存空间 buffer：缓冲 cache：缓存 常用的选项1234567usage: free [-b|-k|-m|-g] [-l] [-o] [-t] [-s delay] [-c count] [-V] -b,-k,-m,-g show output in Bytes, KB, MB, or GB 用来指定输出的单位。 -l show detailed low and high memory statistics 可以看到详细的最大最小值 -o use old format (no -/+buffers/cache line) 以老的格式显示，没有-/+buffers/cache line那一行 -t display total for RAM + swap ：会显示内存的总和，包括物理内存和swap分区大小。 -s update every [delay] seconds ： 输出结果每秒刷新一次 -c update [count] times ：刷新次数 -V display version information and exit ：显示版本信息。 注意 buffer与cache buffer缓冲区:将数据缓冲下来，解决速度慢和快的交接；速度快的需要通过缓冲区将数据一点一点传给速度慢的区域。例如：从内存中将数据往硬盘中写入，并不是直接写入，而是缓冲到一定大小之后刷入硬盘中。cached缓冲区:实现数据的重复使用，速度慢的需要通过缓存将经常要用到的数据缓存起来，缓存下来的数据可以提供高速的传输给速度快的设备。例如：将硬盘中的数据读取出来放在内存的缓存区中，这样以后再次访问同一个资源，速度回快很多。目的:为了提高IO的性能, 性能调优清空cached与buffer:与/proc/sys/vm/drop_caches这个内核参数有关 swap分区 介绍:内存不够用的时候，从硬盘上找一部分空间，将内存中最近最少使用的数据挪到硬盘的空间里。这段在硬盘中的空间就是swap分区。 参考文献 1.http://www.stackops.info/2015/09/20/Linux%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-free/index.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>free</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于vps和github下的博客建立(TBD)]]></title>
    <url>%2F2017%2F09%2F04%2FjianzhanNote1%2F</url>
    <content type="text"><![CDATA[自己原本的 vpn 到期了,服务商的网站不知道为什么打不开了. 可能是被关停了吧. 所以前段时间才想再买个 vpn ,查了很久发现说vps 用来clip墙 很合适, 所以就买了搬瓦工 最便宜的套餐.完成我的目的后, 发现vps光用来clip墙有点浪费, 于是就考虑把个人的博客建立在上面. 建站过程购买并设置vps选择合适的套餐简单的设置配置SS线下主机配置安装git bash安装hexovps配置安装nginx安装gitgithub配置遇到的问题安装过程中的问题使用中的问题参考链接]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图床服务]]></title>
    <url>%2F2017%2F09%2F01%2Ftuchuang%2F</url>
    <content type="text"><![CDATA[新建立的博客, 之后可能文章会比较多, 所以如果把图片全部放到vps中, 那么可能访问速度会比较慢.所以考虑图床服务, 大家都在用七牛云, 于是就拿它来试试 步骤注册七牛云账号点击这里注册七牛云 新建对象储存1.点击新建对象储存起一个存储空间名2.保存空间概览–测试域名3.点击个人面板–密钥管理保存AK 和 SK两个密钥 在Mpic中填写配置下载MPic软件Mpic地址 填写配置将之前的保存的AK SK密钥填写进去, 再将保存的测试域名填写进去 上传测试可以看到, 上传成功了 遇到的坑 填写MPic的时候, 域名选择成了https:, 导致图片总是出不来, 后来改成http:再传图片就好了 参考链接 1.在 iPic 中添加七牛云 2. 罗朝福 图床 神器]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2017%2F09%2F01%2FFirstDay%2F</url>
    <content type="text"><![CDATA[先聊两句虽说文章的名字是第一篇博客, 但是实际上自己写博客已经很久了, 只是之前一直在wordpress上面写, 虽然文章数量不少, 但是都是质量堪忧, 只起到了玩玩的目的.现在买了一个vps, 利用hexo来做了自己的博客, 希望之后能做成一个很好的博客网站, 分享自己觉得好玩的东西,同时与更多的老司机进行交流. 板块设定之前的网站一直都没有很好的条理, 感觉很乱, 现在觉得自己应该提前想好做那几块的东西.鉴于自己的工作以及兴趣爱好, 觉得暂时设定下面几个板块比较合适 生活杂记 好软挖掘 影视分享 技术小栈1 技术小栈2 技术小栈3 杂物箱 更新频率自己由于工作的原因, 时间一般不固定, 所以更新的可能不是很规律, 先这样吧, 等之后完善后看看是否能有规律的进行更新 关于自己github yayaysyaweibosongshouli]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>tag1</tag>
      </tags>
  </entry>
</search>
